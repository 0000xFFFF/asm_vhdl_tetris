;; # # # # # # # # # #
;; # . . . . . . . . #
;; # . . . . . . . . #
;; # . . . . . . . . #
;; # . . . . . . . . #
;; # . . . . . . . . #
;; # . . . . . . . . #
;; # . . . . . . . . #
;; # . . . . . . . . #
;; # # # # # # # # # #
;;
;;     0 1 2 3 4 5 6 7
;;   # # # # # # # # # #
;; 0 # . . . . . . . . #
;; 1 # . . . . . . . . #
;; 2 # . . . . . . . . #
;; 3 # . . . . . . . . #
;; 4 # . . . . . . . . #
;; 5 # . . . . . . . . #
;; 6 # . . . . . . . . #
;; 7 # . . . . . . . . #
;;   # # # # # # # # # #
;;
;; ###########################
;; #  0  1  2  3  4  5  6  7 #
;; #  8  9 10 11 12 13 14 15 #
;; # 16 17 18 19 20 21 22 23 #
;; # 24 25 26 27 28 29 30 31 #
;; # 32 33 34 35 36 37 38 39 #
;; # 40 41 42 43 44 45 46 47 #
;; # 48 49 50 51 52 53 54 55 #
;; # 56 57 58 59 60 61 62 63 #
;; ###########################
;; 
;;

.data
8 ;; pointer na p_data
0 ;; frame count
1 ;; frame per heartbeat
0x100 ;; pointer - rgb matrix
0x140 ;; pointer - frame sync
0x200 ;; pointer - pb dec

3, 0 ;; default player x,y

;; p_data:
3, 0 ;; x, y player/block location
0, 0, 0, 0, 0, 0, 0, 0 ;; hitmap
0, 1, 1, 0, 0, 0, 0, 0 ;; hitmap
0, 1, 1, 0, 0, 0, 0, 1 ;; hitmap
0, 1, 1, 0, 1, 0, 0, 1 ;; hitmap
0, 1, 1, 0, 1, 1, 0, 1 ;; hitmap
1, 1, 1, 0, 1, 1, 1, 1 ;; hitmap
1, 1, 1, 0, 1, 1, 1, 1 ;; hitmap
1, 1, 1, 0, 1, 1, 1, 1 ;; hitmap
-1 ;; hitmap_end

.text

;;==[ CLOCK LOOP
frame_sync_rising_edge:
;;# clock loop setup
	sub R0, R0, R0 ;; R0 = 0
	inc R0, R0     ;; R0 = 1
	shl R0, R0     ;; R0 = 2
	shl R0, R0     ;; R0 = 4
	ld R1, R0      ;; R1 -> p_frame_sync
frame_sync_wait_0:
	ld R0, R1                   ;; R0 = *p_frame_sync
	jmpnz frame_sync_wait_0
frame_sync_wait_1:
	ld R0, R1                   ;; R0 = *p_frame_sync
	jmpz frame_sync_wait_1

;;#==[ DRAW BEGIN
    sub R0, R0, R0              ;; R0 = 0
	ld R4, R0                   ;; R4 -> p_data
	inc R0, R0                  ;; addr = 1
	inc R0, R0                  ;; addr = 2
	inc R0, R0                  ;; addr = 3
	ld R7, R0                   ;; R7 -> p_rgb_matrix
	sub R3, R3, R3              ;; color = 0
    inc R3, R3                  ;; color = 1 (red)
;;#==[ DRAW PLAYER
	ld R1, R4                   ;; R1 <- player x coord
	inc R4, R4                  ;; p_data++
	ld R2, R4                   ;; R2 <- player y coord
	shl R2, R2                  ;; y << 1
	shl R2, R2                  ;; y << 1
	shl R2, R2                  ;; y << 1
	add R2, R1, R2              ;; y += x
	add R2, R7, R2              ;; y += p_rgb_matrix
	st R3, R2                   ;; p_rgb_matrix[x][y] = red color
;;#==[ DRAW HITMAP
	inc R4, R4                  ;; p_data++ / p_data -> hitmap[0]
	shl R3, R3                  ;; color = red->green
	sub R0, R0, R0              ;; R0 = 0 / counter
draw_hitmap_loop:
	ld R1, R4                   ;; R1 = hitmap[i]
	jmps draw_end               ;; hitmap[i] == -1
	jmpz draw_hitmap_next       ;; hitmap[i] == 0
	;; hitmap[i] == 1
	add R2, R7, R0 ;; R2 = p_rgb_matrix + counter
	st R3, R2      ;; color -> R2
draw_hitmap_next:
	inc R4, R4 ;; p_data++
	inc R0, R0 ;; R0++ / counter++
	jmp draw_hitmap_loop
draw_end:
;;#==[ DRAW END

;;#==[ SLEEP
sleep:
	sub R0, R0, R0              ;; R0 = 0
	inc R0, R0                  ;; R0 = 1
	ld R1, R0                   ;; R1 = frame_cnt
	inc R0, R0                  ;; R0 = 2
	ld R2, R0                   ;; R2 = frames_per_heartbeat
	dec R0, R0                  ;; R0 = 1
	inc R1, R1                  ;; R1++;
	sub R2, R2, R1              ;; frame_cnt == frames_per_heartbeat => jump
	jmpz count_frames_heatbeat  ;; 
	st R1, R0                   ;; frame_cnt = R1
	jmp frame_sync_rising_edge
count_frames_heatbeat:
	sub R1, R1, R1  ;; R1 = 0
	st R1, R0       ;; frame_cnt = 0
;;#==[ SLEEP END

;;#==[ CONTROLS BEGIN
;	sub R0, R0, R0  ;; R0 = 0
;	ld R4, R0       ;; R4 = p_data / x
;	inc R0, R0      ;; R0 = 1
;	shl R0, R0      ;; R0 = 2
;	shl R0, R0      ;; R0 = 4
;	inc R0, R0      ;; R0 = 5
;	ld R5, R0       ;; R5 = pb dec
;	ld R1, R4       ;; R1 = player x pos
;	ld R2, R5       ;; R2 = ctrl / -1 if left, +1 if right
;	add R0, R1, R2  ;; R0 = x + ctrl
;	st R0, R4       ;; R0 -> p_data / x
;;#==[ CONTROLS END


;;#==[ FALLING BEGIN
;;#==[ FALLING -> CHECK UNDER
;; before falling, check if the player will hit a block underneath
	sub R0, R0, R0               ;; R0 = 0
	ld R4, R0                    ;; p_data = start / p_data -> x
	ld R1, R4                    ;; R1 = x
	inc R4, R4                   ;; p_data++ / p_data -> y
	ld R2, R4                    ;; R2 = y
	inc R4, R4                   ;; p_data++ / p_data -> hitmap[0]
	;; R1 = x ; R2 = y ; R4 = hitmap[0]
	inc R2, R2                   ;; y++
	shl R2, R2                   ;; y << 1
	shl R2, R2                   ;; y << 1
	shl R2, R2                   ;; y << 1
	add R2, R1, R2               ;; y += x
	add R2, R4, R2               ;; y += R4
	ld R0, R2                    ;;
	jmpz falling_check_beneath   ;; if hitmap[y+1] == 1 -> jmp falling_hit
	jmp falling_hit
;;#==[ FALLING -> CHECK UNDER END

;;#==[ FALLING -> CHECK BOTTOM
;; check if player hit the bottom / y == 7
falling_check_beneath:
	sub R0, R0, R0              ;; R0 = 0
	ld R4, R0                   ;; p_data = start (addr 6) / x cord
	inc R4, R4                  ;; p_data++ / y cord
	ld R1, R4                   ;; R1 <- player y coord
	sub R0, R0, R0              ;; R0 = 0
	inc R0, R0                  ;; R0 = 1
	inc R0, R0                  ;; R0 = 2
	shl R0, R0                  ;; R0 = 4
	shl R0, R0                  ;; R0 = 8
	dec R0, R0                  ;; R0 = 7
	sub R2, R0, R1
	jmpz falling_hit
;;#==[ FALLING -> CHECK BOTTOM END

;;#==[ FALLING -> CHECK END
	;; all checks passed, you can fall now
	jmp falling
;;#==[ FALLING END


;; load x & y and put in hitmap[x][y] = 1
;;#==[ FALLING -> HIT
falling_hit:
	;; load x & y
	sub R0, R0, R0              ;; R0 = 0
	ld R4, R0                   ;; p_data = start (addr 6)
	ld R1, R4                   ;; R1 <- player x coord
	inc R4, R4                  ;; p_data++
	ld R2, R4                   ;; R2 <- player y coord
	inc R4, R4                  ;; p_data++ / p_data -> hitmap[0]
	;; R2 = (y << 3) + x + R4 / R2 -> hitmap[i]
	shl R2, R2                  ;; y << 1
	shl R2, R2                  ;; y << 1
	shl R2, R2                  ;; y << 1
	add R2, R1, R2              ;; y += x
	add R2, R4, R2              ;; y += R4
	sub R0, R0, R0              ;; R0 = 0
	inc R0, R0                  ;; R0 = 1
	st R0, R2                   ;; hitmap[i] = 1

;;#==[ FALLING -> HIT -> GAME OVER
;;# setup
	sub R0, R0, R0              ;; R0 = 0
	ld R4, R0                   ;; R4 = p_data / x
	inc R4, R4                  ;; R4 = p_data / y
	inc R4, R4                  ;; R4 = hitmap[0]
	sub R2, R2, R2              ;; R2 = 0
	inc R2, R2                  ;; R2 = 1
	sub R3, R3, R3              ;; R3 = 0 / counter
	sub R5, R5, R5              ;; R5 = 0
	inc R5, R5                  ;; R5 = 1
	shl R5, R5                  ;; R5 = 2
	shl R5, R5                  ;; R5 = 4
	shl R5, R5                  ;; R5 = 8
gameover_check_loop:
	sub R0, R3, R5  ;; counter == 8 -> jump gameover_end / failed to gameover
	jmpz gameover_end
	ld R1, R4       ;; R1 = hitmap[i]
	sub R0, R1, R2  ;; hitmap[i] == 1 -> jump gameover
	jmpz gameover
	inc R4, R4 ;; R4++
	inc R3, R3 ;; R3++ / counter++
	jmp gameover_check_loop

;;#==[ GAME OVER CLEAR LOOP BEGIN
gameover:
	sub R0, R0, R0              ;; R0 = 0
	ld R4, R0                   ;; R4 = p_data / x
	inc R4, R4                  ;; R4 = p_data / y
	inc R4, R4                  ;; R4 = hitmap[0]
	sub R1, R1, R1              ;; R1 = 0
gameover_loop:
	ld R0, R4             ;; 
	jmps gameover_end     ;; hitmap[i] == -1 -> jump gameover_end
	st R1, R4             ;; hitmap[i] = 0
	inc R4, R4            ;; hitmap++
	jmp gameover_loop
;;#==[ GAME OVER CLEAR LOOP END

gameover_end:

;;#==[ FALLING -> HIT -> RESET PLAYER POS
;; x = 3 , y = 0
	sub R0, R0, R0  ;; R0 = 0
	inc R0, R0      ;; R0 = 1
	inc R0, R0      ;; R0 = 2
	shl R0, R0      ;; R0 = 4
	inc R0, R0      ;; R0 = 5
	inc R0, R0      ;; R0 = 6
	ld R1, R0       ;; R1 = def x
	inc R0, R0      ;; R0 = 7
	ld R2, R0       ;; R2 = def y
	sub R0, R0, R0  ;; R0 = 0
	ld R4, R0       ;; R4 -> p_data / x
	st R1, R4       ;; def x -> x
	inc R4, R4      ;; p_data++ / p_data -> y
	st R2, R4       ;; def y -> y

;;#==[ CHECK LOWEST
;;# setup
	sub R0, R0, R0  ;; R3 = 0
	ld R4, R0       ;; R4 -> p_data / x
	inc R4, R4      ;; R4 -> y
	inc R4, R4      ;; R4 -> hitmap[0]
	sub R3, R3, R3  ;; R3 = 0
	inc R3, R3      ;; R3 = 1
	shl R3, R3      ;; R3 = 2
	shl R3, R3      ;; R3 = 4
	shl R3, R3      ;; R3 = 8
	dec R3, R3      ;; R3 = 7	
	shl R3, R3      ;; R3 = 14
	shl R3, R3      ;; R3 = 28
	shl R3, R3      ;; R3 = 56
	add R4, R4, R3  ;; R4 = hitmap + 56 -> hitmap[56]
check_lowest_loop:
	ld R0, R4           ;; R0 = hitmap[i]
	jmps replace_setup  ;; hitmap[i] == -1 -> jmp replace_setup
	ld R0, R4           ;; R0 = hitmap[i]
	jmpz end            ;; hitmap[i] == 0  -> jmp end
	inc R4, R4
	jmp check_lowest_loop

replace_setup:
	sub R2, R2, R2 ; R2 = y level (starts from the lowest level); if y = 0, go to the modified replace_loop_start label
	inc R2, R2
	shl R2, R2
	shl R2, R2
	shl R2, R2     ; R2 = y = 8
	mov R3, R2     ; R3 = const (8) for calculating hitmap[above]
	mov R1, R2     ; R1 = x = 8
	mov R4, R2
	inc R4, R4
	inc R4, R4     ; hitmap[0]
	add R4, R4, R2 ; hitmap[8]
	add R4, R4, R2 ; hitmap[16]
	add R4, R4, R2 ; hitmap[24]
	add R4, R4, R2 ; hitmap[32]
	add R4, R4, R2 ; hitmap[40]
	add R4, R4, R2 ; hitmap[48]
	add R4, R4, R2 ; hitmap[56]
	add R4, R4, R2 ; hitmap[64] = -1
	dec R4, R4     ; R4 = hitmap[63] / bot right
	mov R0, R4
	sub R0, R0, R3 ; R0 = hitmap[current] - 8 = hitmap[above]
	dec R2, R2     ; y = 7 at the start so that it's 0 when we hit the top row
	sub R7, R7, R7
replace_loop_start:
	dec R1, R1     ; x--
	jmps replace_loop_decrease_y
replace_loop_p2:
	ld R7, R0      ; R1 = value of hitmap[above]
	st R7, R4      ; hitmap[current] <- value of hitmap[above]
	dec R4, R4     ; hitmap[current - 1]
	dec R0, R0     ; hitmap[above - 1]
	jmp replace_loop_start
replace_loop_decrease_y:
	mov R1, R3
	dec R2, R2     ; y--
	jmpz replace_loop_top_row
	dec R1, R1     ; reset x to 7
	jmp replace_loop_p2
replace_loop_top_row:
	dec R1, R1
	jmps end
	sub R0, R0, R0
	st R0, R4
	dec R4, R4
	jmp replace_loop_top_row

;;#==[ FALLING
falling:
	sub R0, R0, R0 ;; R0 = 0
	ld R4, R0      ;; p_data = start / p_data = x
	inc R4, R4     ;; p_data++ / p_data = y
	ld R1, R4      ;; R1 <- y
	inc R1, R1     ;; R1++
	st R1, R4      ;; R1 -> y
	jmp end
;;#==[ FALLING END

end:
	jmp frame_sync_rising_edge
;;==[ CLOCK LOOP END