.data
6 ;; pointer na kocku
0 ;; frame count
75 ;; frame per heartbeat
0x100 ;; pointer - rgb matrix
0x140 ;; pointer - frame sync
0x200 ;; pointer - pb dec
4, 2
-1, -1

.text
/*
	Spisak registara:
	R0 - tmp register
	R1 - tmp chunk x
	R2 - tmp chunk y
	R3 - color
	R4 - p_food_and_snake
	R5 - p_pb_dec
	R6 - p_frame_sync
	R7 - p_rgb_matrix
*/

begin:
	;; Setup pointers and color.
	inc R0, R0                  ;; addr = 1
	inc R0, R0                  ;; addr = 2
	inc R0, R0                  ;; addr = 3
	ld R7, R0                   ;; R7 <- p_rgb_matrix
	inc R0, R0                  ;; addr = 4
	ld R6, R0                   ;; R6 <- p_frame_sync
	inc R0, R0                  ;; addr = 5
	ld R5, R0                   ;; R5 <- p_pb_dec
	inc R3, R3                  ;; color = RED

frame_sync_rising_edge:
frame_sync_wait_0:
	ld R0, R6                   ;; R0 <- p_frame_sync
	jmpnz frame_sync_wait_0
frame_sync_wait_1:
	ld R0, R6                   ;; R0 <- p_frame_sync
	jmpz frame_sync_wait_1

draw_tetris_begin:
	;; color is RED at this point.
	sub R0, R0, R0              ;; addr = 0
	ld R4, R0                   ;; R4 <- p_food_and_snake
	shl R3, R3                  ;; initial color = green
	shl R3, R3
draw_playerblock_loop:
	ld R1, R4                   ;; R1 <- p_food_and_snake->x
	jmps draw_tetris_end        ;; Jump to end if passed tail of snake.
	inc R4, R4
	ld R2, R4                   ;; R2 <- p_food_and_snake->y
	inc R4, R4                  ;; Move p_food_and_snake

	;; p_rgb_matrix + (y << 3) + x
	shl R2, R2
	shl R2, R2
	shl R2, R2
	add R2, R1, R2              ;; (y << 3) + x
	add R2, R7, R2              ;; p_rgb_matrix + (y << 3) + x
	st R3, R2                   ;; apply color   R3 -> p_rgb_matrix[y][x]

	shr R3, R3
	jmpnz draw_playerblock_loop
	inc R3, R3
	jmp draw_playerblock_loop
draw_tetris_end:

count_frames_begin:
	sub R0, R0, R0              ;; addr = 0
	inc R0, R0
	ld R1, R0                   ;; R1 <- frame_cnt
	inc R0, R0
	ld R2, R0                   ;; R2 <- frames_per_heartbeat
	dec R0, R0
	inc R1, R1                  ;; frame_cnt++;
	sub R2, R2, R1              ;; frame_cnt == frames_per_heartbeat
	jmpz count_frames_heatbeat  ;; Jump if equal.
	st R1, R0                   ;; R1 -> frame_cnt
	jmp frame_sync_rising_edge
count_frames_heatbeat:
	sub R1, R1, R1
	st R1, R0                   ;; R1 i.e. 0 -> frame_cnt
	;; Move snake, eat food...
count_frames_end:

;; TETRIS LOGIC


end:
	jmp frame_sync_rising_edge
